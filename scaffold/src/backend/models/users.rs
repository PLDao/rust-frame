//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use super::sea_orm_active_enums::UserRoleType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "Text", unique)]
    pub user_id: String,
    #[sea_orm(column_type = "Text")]
    pub password_hash: String,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub email: Option<String>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub phone: Option<String>,
    pub role: UserRoleType,
    pub is_active: Option<bool>,
    pub is_verified: Option<bool>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::auth_sessions::Entity")]
    AuthSessions,
    #[sea_orm(has_many = "super::email_verifications::Entity")]
    EmailVerifications,
    #[sea_orm(has_many = "super::password_resets::Entity")]
    PasswordResets,
    #[sea_orm(has_many = "super::user_logs::Entity")]
    UserLogs,
}

impl Related<super::auth_sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthSessions.def()
    }
}

impl Related<super::email_verifications::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EmailVerifications.def()
    }
}

impl Related<super::password_resets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PasswordResets.def()
    }
}

impl Related<super::user_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserLogs.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
