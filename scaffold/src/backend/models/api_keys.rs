//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "api__keys")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub user_id: i64,
    pub plan_id: i32,
    pub start_date: DateTime,
    pub end_date: DateTime,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", unique)]
    pub token: String,
    pub usage_limit: Option<i32>,
    pub current_usage: Option<i32>,
    pub active: bool,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::api_plans::Entity",
        from = "Column::PlanId",
        to = "super::api_plans::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    ApiPlans,
    #[sea_orm(has_many = "super::api_usage_logs::Entity")]
    ApiUsageLogs,
    #[sea_orm(
        belongs_to = "super::api_users::Entity",
        from = "Column::UserId",
        to = "super::api_users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ApiUsers,
}

impl Related<super::api_plans::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiPlans.def()
    }
}

impl Related<super::api_usage_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiUsageLogs.def()
    }
}

impl Related<super::api_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiUsers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
